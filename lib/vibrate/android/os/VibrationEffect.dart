// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.os.VibrationEffect$BasicEnvelopeBuilder`
class VibrationEffect$BasicEnvelopeBuilder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<VibrationEffect$BasicEnvelopeBuilder> $type;

  @jni$_.internal
  VibrationEffect$BasicEnvelopeBuilder.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/os/VibrationEffect$BasicEnvelopeBuilder',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $VibrationEffect$BasicEnvelopeBuilder$NullableType();
  static const type = $VibrationEffect$BasicEnvelopeBuilder$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory VibrationEffect$BasicEnvelopeBuilder() {
    return VibrationEffect$BasicEnvelopeBuilder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_addControlPoint = _class.instanceMethodId(
    r'addControlPoint',
    r'(FFJ)Landroid/os/VibrationEffect$BasicEnvelopeBuilder;',
  );

  static final _addControlPoint =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Double, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              int,
            )
          >();

  /// from: `public android.os.VibrationEffect$BasicEnvelopeBuilder addControlPoint(float f, float f1, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect$BasicEnvelopeBuilder? addControlPoint(
    double f,
    double f1,
    int j,
  ) {
    return _addControlPoint(
      reference.pointer,
      _id_addControlPoint as jni$_.JMethodIDPtr,
      f,
      f1,
      j,
    ).object<VibrationEffect$BasicEnvelopeBuilder?>(
      const $VibrationEffect$BasicEnvelopeBuilder$NullableType(),
    );
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/os/VibrationEffect;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.VibrationEffect build()`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }

  static final _id_setInitialSharpness = _class.instanceMethodId(
    r'setInitialSharpness',
    r'(F)Landroid/os/VibrationEffect$BasicEnvelopeBuilder;',
  );

  static final _setInitialSharpness =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
            )
          >();

  /// from: `public android.os.VibrationEffect$BasicEnvelopeBuilder setInitialSharpness(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect$BasicEnvelopeBuilder? setInitialSharpness(double f) {
    return _setInitialSharpness(
      reference.pointer,
      _id_setInitialSharpness as jni$_.JMethodIDPtr,
      f,
    ).object<VibrationEffect$BasicEnvelopeBuilder?>(
      const $VibrationEffect$BasicEnvelopeBuilder$NullableType(),
    );
  }
}

final class $VibrationEffect$BasicEnvelopeBuilder$NullableType
    extends jni$_.JObjType<VibrationEffect$BasicEnvelopeBuilder?> {
  @jni$_.internal
  const $VibrationEffect$BasicEnvelopeBuilder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/os/VibrationEffect$BasicEnvelopeBuilder;';

  @jni$_.internal
  @core$_.override
  VibrationEffect$BasicEnvelopeBuilder? fromReference(
    jni$_.JReference reference,
  ) => reference.isNull
      ? null
      : VibrationEffect$BasicEnvelopeBuilder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<VibrationEffect$BasicEnvelopeBuilder?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($VibrationEffect$BasicEnvelopeBuilder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($VibrationEffect$BasicEnvelopeBuilder$NullableType) &&
        other is $VibrationEffect$BasicEnvelopeBuilder$NullableType;
  }
}

final class $VibrationEffect$BasicEnvelopeBuilder$Type
    extends jni$_.JObjType<VibrationEffect$BasicEnvelopeBuilder> {
  @jni$_.internal
  const $VibrationEffect$BasicEnvelopeBuilder$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/os/VibrationEffect$BasicEnvelopeBuilder;';

  @jni$_.internal
  @core$_.override
  VibrationEffect$BasicEnvelopeBuilder fromReference(
    jni$_.JReference reference,
  ) => VibrationEffect$BasicEnvelopeBuilder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<VibrationEffect$BasicEnvelopeBuilder?> get nullableType =>
      const $VibrationEffect$BasicEnvelopeBuilder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($VibrationEffect$BasicEnvelopeBuilder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($VibrationEffect$BasicEnvelopeBuilder$Type) &&
        other is $VibrationEffect$BasicEnvelopeBuilder$Type;
  }
}

/// from: `android.os.VibrationEffect$Composition`
class VibrationEffect$Composition extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<VibrationEffect$Composition> $type;

  @jni$_.internal
  VibrationEffect$Composition.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/os/VibrationEffect$Composition',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $VibrationEffect$Composition$NullableType();
  static const type = $VibrationEffect$Composition$Type();

  /// from: `static public final int DELAY_TYPE_PAUSE`
  static const DELAY_TYPE_PAUSE = 0;

  /// from: `static public final int DELAY_TYPE_RELATIVE_START_OFFSET`
  static const DELAY_TYPE_RELATIVE_START_OFFSET = 1;

  /// from: `static public final int PRIMITIVE_CLICK`
  static const PRIMITIVE_CLICK = 1;

  /// from: `static public final int PRIMITIVE_LOW_TICK`
  static const PRIMITIVE_LOW_TICK = 8;

  /// from: `static public final int PRIMITIVE_QUICK_FALL`
  static const PRIMITIVE_QUICK_FALL = 6;

  /// from: `static public final int PRIMITIVE_QUICK_RISE`
  static const PRIMITIVE_QUICK_RISE = 4;

  /// from: `static public final int PRIMITIVE_SLOW_RISE`
  static const PRIMITIVE_SLOW_RISE = 5;

  /// from: `static public final int PRIMITIVE_SPIN`
  static const PRIMITIVE_SPIN = 3;

  /// from: `static public final int PRIMITIVE_THUD`
  static const PRIMITIVE_THUD = 2;

  /// from: `static public final int PRIMITIVE_TICK`
  static const PRIMITIVE_TICK = 7;
  static final _id_addPrimitive = _class.instanceMethodId(
    r'addPrimitive',
    r'(I)Landroid/os/VibrationEffect$Composition;',
  );

  static final _addPrimitive =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `public android.os.VibrationEffect$Composition addPrimitive(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect$Composition? addPrimitive(int i) {
    return _addPrimitive(
      reference.pointer,
      _id_addPrimitive as jni$_.JMethodIDPtr,
      i,
    ).object<VibrationEffect$Composition?>(
      const $VibrationEffect$Composition$NullableType(),
    );
  }

  static final _id_addPrimitive$1 = _class.instanceMethodId(
    r'addPrimitive',
    r'(IF)Landroid/os/VibrationEffect$Composition;',
  );

  static final _addPrimitive$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Double)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              double,
            )
          >();

  /// from: `public android.os.VibrationEffect$Composition addPrimitive(int i, float f)`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect$Composition? addPrimitive$1(int i, double f) {
    return _addPrimitive$1(
      reference.pointer,
      _id_addPrimitive$1 as jni$_.JMethodIDPtr,
      i,
      f,
    ).object<VibrationEffect$Composition?>(
      const $VibrationEffect$Composition$NullableType(),
    );
  }

  static final _id_addPrimitive$2 = _class.instanceMethodId(
    r'addPrimitive',
    r'(IFI)Landroid/os/VibrationEffect$Composition;',
  );

  static final _addPrimitive$2 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32, jni$_.Double, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              double,
              int,
            )
          >();

  /// from: `public android.os.VibrationEffect$Composition addPrimitive(int i, float f, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect$Composition? addPrimitive$2(int i, double f, int i1) {
    return _addPrimitive$2(
      reference.pointer,
      _id_addPrimitive$2 as jni$_.JMethodIDPtr,
      i,
      f,
      i1,
    ).object<VibrationEffect$Composition?>(
      const $VibrationEffect$Composition$NullableType(),
    );
  }

  static final _id_addPrimitive$3 = _class.instanceMethodId(
    r'addPrimitive',
    r'(IFII)Landroid/os/VibrationEffect$Composition;',
  );

  static final _addPrimitive$3 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Int32, jni$_.Double, jni$_.Int32, jni$_.Int32)
                >,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              double,
              int,
              int,
            )
          >();

  /// from: `public android.os.VibrationEffect$Composition addPrimitive(int i, float f, int i1, int i2)`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect$Composition? addPrimitive$3(int i, double f, int i1, int i2) {
    return _addPrimitive$3(
      reference.pointer,
      _id_addPrimitive$3 as jni$_.JMethodIDPtr,
      i,
      f,
      i1,
      i2,
    ).object<VibrationEffect$Composition?>(
      const $VibrationEffect$Composition$NullableType(),
    );
  }

  static final _id_compose = _class.instanceMethodId(
    r'compose',
    r'()Landroid/os/VibrationEffect;',
  );

  static final _compose =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.VibrationEffect compose()`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect? compose() {
    return _compose(
      reference.pointer,
      _id_compose as jni$_.JMethodIDPtr,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }
}

final class $VibrationEffect$Composition$NullableType
    extends jni$_.JObjType<VibrationEffect$Composition?> {
  @jni$_.internal
  const $VibrationEffect$Composition$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/os/VibrationEffect$Composition;';

  @jni$_.internal
  @core$_.override
  VibrationEffect$Composition? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : VibrationEffect$Composition.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<VibrationEffect$Composition?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($VibrationEffect$Composition$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($VibrationEffect$Composition$NullableType) &&
        other is $VibrationEffect$Composition$NullableType;
  }
}

final class $VibrationEffect$Composition$Type
    extends jni$_.JObjType<VibrationEffect$Composition> {
  @jni$_.internal
  const $VibrationEffect$Composition$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/os/VibrationEffect$Composition;';

  @jni$_.internal
  @core$_.override
  VibrationEffect$Composition fromReference(jni$_.JReference reference) =>
      VibrationEffect$Composition.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<VibrationEffect$Composition?> get nullableType =>
      const $VibrationEffect$Composition$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($VibrationEffect$Composition$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($VibrationEffect$Composition$Type) &&
        other is $VibrationEffect$Composition$Type;
  }
}

/// from: `android.os.VibrationEffect$WaveformEnvelopeBuilder`
class VibrationEffect$WaveformEnvelopeBuilder extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<VibrationEffect$WaveformEnvelopeBuilder> $type;

  @jni$_.internal
  VibrationEffect$WaveformEnvelopeBuilder.fromReference(
    jni$_.JReference reference,
  ) : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/os/VibrationEffect$WaveformEnvelopeBuilder',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $VibrationEffect$WaveformEnvelopeBuilder$NullableType();
  static const type = $VibrationEffect$WaveformEnvelopeBuilder$Type();
  static final _id_new$ = _class.constructorId(r'()V');

  static final _new$ =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_NewObject')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory VibrationEffect$WaveformEnvelopeBuilder() {
    return VibrationEffect$WaveformEnvelopeBuilder.fromReference(
      _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr).reference,
    );
  }

  static final _id_addControlPoint = _class.instanceMethodId(
    r'addControlPoint',
    r'(FFJ)Landroid/os/VibrationEffect$WaveformEnvelopeBuilder;',
  );

  static final _addControlPoint =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double, jni$_.Double, jni$_.Int64)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
              double,
              int,
            )
          >();

  /// from: `public android.os.VibrationEffect$WaveformEnvelopeBuilder addControlPoint(float f, float f1, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect$WaveformEnvelopeBuilder? addControlPoint(
    double f,
    double f1,
    int j,
  ) {
    return _addControlPoint(
      reference.pointer,
      _id_addControlPoint as jni$_.JMethodIDPtr,
      f,
      f1,
      j,
    ).object<VibrationEffect$WaveformEnvelopeBuilder?>(
      const $VibrationEffect$WaveformEnvelopeBuilder$NullableType(),
    );
  }

  static final _id_build = _class.instanceMethodId(
    r'build',
    r'()Landroid/os/VibrationEffect;',
  );

  static final _build =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public android.os.VibrationEffect build()`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect? build() {
    return _build(
      reference.pointer,
      _id_build as jni$_.JMethodIDPtr,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }

  static final _id_setInitialFrequencyHz = _class.instanceMethodId(
    r'setInitialFrequencyHz',
    r'(F)Landroid/os/VibrationEffect$WaveformEnvelopeBuilder;',
  );

  static final _setInitialFrequencyHz =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Double,)>,
              )
            >
          >('globalEnv_CallObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              double,
            )
          >();

  /// from: `public android.os.VibrationEffect$WaveformEnvelopeBuilder setInitialFrequencyHz(float f)`
  /// The returned object must be released after use, by calling the [release] method.
  VibrationEffect$WaveformEnvelopeBuilder? setInitialFrequencyHz(double f) {
    return _setInitialFrequencyHz(
      reference.pointer,
      _id_setInitialFrequencyHz as jni$_.JMethodIDPtr,
      f,
    ).object<VibrationEffect$WaveformEnvelopeBuilder?>(
      const $VibrationEffect$WaveformEnvelopeBuilder$NullableType(),
    );
  }
}

final class $VibrationEffect$WaveformEnvelopeBuilder$NullableType
    extends jni$_.JObjType<VibrationEffect$WaveformEnvelopeBuilder?> {
  @jni$_.internal
  const $VibrationEffect$WaveformEnvelopeBuilder$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/os/VibrationEffect$WaveformEnvelopeBuilder;';

  @jni$_.internal
  @core$_.override
  VibrationEffect$WaveformEnvelopeBuilder? fromReference(
    jni$_.JReference reference,
  ) => reference.isNull
      ? null
      : VibrationEffect$WaveformEnvelopeBuilder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<VibrationEffect$WaveformEnvelopeBuilder?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($VibrationEffect$WaveformEnvelopeBuilder$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($VibrationEffect$WaveformEnvelopeBuilder$NullableType) &&
        other is $VibrationEffect$WaveformEnvelopeBuilder$NullableType;
  }
}

final class $VibrationEffect$WaveformEnvelopeBuilder$Type
    extends jni$_.JObjType<VibrationEffect$WaveformEnvelopeBuilder> {
  @jni$_.internal
  const $VibrationEffect$WaveformEnvelopeBuilder$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/os/VibrationEffect$WaveformEnvelopeBuilder;';

  @jni$_.internal
  @core$_.override
  VibrationEffect$WaveformEnvelopeBuilder fromReference(
    jni$_.JReference reference,
  ) => VibrationEffect$WaveformEnvelopeBuilder.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<VibrationEffect$WaveformEnvelopeBuilder?> get nullableType =>
      const $VibrationEffect$WaveformEnvelopeBuilder$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($VibrationEffect$WaveformEnvelopeBuilder$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($VibrationEffect$WaveformEnvelopeBuilder$Type) &&
        other is $VibrationEffect$WaveformEnvelopeBuilder$Type;
  }
}

/// from: `android.os.VibrationEffect`
class VibrationEffect extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<VibrationEffect> $type;

  @jni$_.internal
  VibrationEffect.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/os/VibrationEffect');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $VibrationEffect$NullableType();
  static const type = $VibrationEffect$Type();
  static final _id_CREATOR = _class.staticFieldId(
    r'CREATOR',
    r'Landroid/os/Parcelable$Creator;',
  );

  /// from: `static public final android.os.Parcelable$Creator<android.os.VibrationEffect> CREATOR`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? get CREATOR =>
      _id_CREATOR.get(_class, const jni$_.JObjectNullableType());

  /// from: `static public final int DEFAULT_AMPLITUDE`
  static const DEFAULT_AMPLITUDE = -1;

  /// from: `static public final int EFFECT_CLICK`
  static const EFFECT_CLICK = 0;

  /// from: `static public final int EFFECT_DOUBLE_CLICK`
  static const EFFECT_DOUBLE_CLICK = 1;

  /// from: `static public final int EFFECT_HEAVY_CLICK`
  static const EFFECT_HEAVY_CLICK = 5;

  /// from: `static public final int EFFECT_TICK`
  static const EFFECT_TICK = 2;
  static final _id_createOneShot = _class.staticMethodId(
    r'createOneShot',
    r'(JI)Landroid/os/VibrationEffect;',
  );

  static final _createOneShot =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int64, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              int,
            )
          >();

  /// from: `static public android.os.VibrationEffect createOneShot(long j, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static VibrationEffect? createOneShot(int j, int i) {
    return _createOneShot(
      _class.reference.pointer,
      _id_createOneShot as jni$_.JMethodIDPtr,
      j,
      i,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }

  static final _id_createPredefined = _class.staticMethodId(
    r'createPredefined',
    r'(I)Landroid/os/VibrationEffect;',
  );

  static final _createPredefined =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Int32,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
            )
          >();

  /// from: `static public android.os.VibrationEffect createPredefined(int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static VibrationEffect? createPredefined(int i) {
    return _createPredefined(
      _class.reference.pointer,
      _id_createPredefined as jni$_.JMethodIDPtr,
      i,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }

  static final _id_createRepeatingEffect = _class.staticMethodId(
    r'createRepeatingEffect',
    r'(Landroid/os/VibrationEffect;)Landroid/os/VibrationEffect;',
  );

  static final _createRepeatingEffect =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.os.VibrationEffect createRepeatingEffect(android.os.VibrationEffect vibrationEffect)`
  /// The returned object must be released after use, by calling the [release] method.
  static VibrationEffect? createRepeatingEffect(
    VibrationEffect? vibrationEffect,
  ) {
    final _$vibrationEffect =
        vibrationEffect?.reference ?? jni$_.jNullReference;
    return _createRepeatingEffect(
      _class.reference.pointer,
      _id_createRepeatingEffect as jni$_.JMethodIDPtr,
      _$vibrationEffect.pointer,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }

  static final _id_createRepeatingEffect$1 = _class.staticMethodId(
    r'createRepeatingEffect',
    r'(Landroid/os/VibrationEffect;Landroid/os/VibrationEffect;)Landroid/os/VibrationEffect;',
  );

  static final _createRepeatingEffect$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (jni$_.Pointer<jni$_.Void>, jni$_.Pointer<jni$_.Void>)
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
            )
          >();

  /// from: `static public android.os.VibrationEffect createRepeatingEffect(android.os.VibrationEffect vibrationEffect, android.os.VibrationEffect vibrationEffect1)`
  /// The returned object must be released after use, by calling the [release] method.
  static VibrationEffect? createRepeatingEffect$1(
    VibrationEffect? vibrationEffect,
    VibrationEffect? vibrationEffect1,
  ) {
    final _$vibrationEffect =
        vibrationEffect?.reference ?? jni$_.jNullReference;
    final _$vibrationEffect1 =
        vibrationEffect1?.reference ?? jni$_.jNullReference;
    return _createRepeatingEffect$1(
      _class.reference.pointer,
      _id_createRepeatingEffect$1 as jni$_.JMethodIDPtr,
      _$vibrationEffect.pointer,
      _$vibrationEffect1.pointer,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }

  static final _id_createWaveform = _class.staticMethodId(
    r'createWaveform',
    r'([JI)Landroid/os/VibrationEffect;',
  );

  static final _createWaveform =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int32)>,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `static public android.os.VibrationEffect createWaveform(long[] js, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static VibrationEffect? createWaveform(jni$_.JLongArray? js, int i) {
    final _$js = js?.reference ?? jni$_.jNullReference;
    return _createWaveform(
      _class.reference.pointer,
      _id_createWaveform as jni$_.JMethodIDPtr,
      _$js.pointer,
      i,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }

  static final _id_createWaveform$1 = _class.staticMethodId(
    r'createWaveform',
    r'([J[II)Landroid/os/VibrationEffect;',
  );

  static final _createWaveform$1 =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
                jni$_.VarArgs<
                  (
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.Int32,
                  )
                >,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
            )
          >();

  /// from: `static public android.os.VibrationEffect createWaveform(long[] js, int[] is, int i)`
  /// The returned object must be released after use, by calling the [release] method.
  static VibrationEffect? createWaveform$1(
    jni$_.JLongArray? js,
    jni$_.JIntArray? is$,
    int i,
  ) {
    final _$js = js?.reference ?? jni$_.jNullReference;
    final _$is$ = is$?.reference ?? jni$_.jNullReference;
    return _createWaveform$1(
      _class.reference.pointer,
      _id_createWaveform$1 as jni$_.JMethodIDPtr,
      _$js.pointer,
      _$is$.pointer,
      i,
    ).object<VibrationEffect?>(const $VibrationEffect$NullableType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r'describeContents',
    r'()I',
  );

  static final _describeContents =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallIntMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `public int describeContents()`
  int describeContents() {
    return _describeContents(
      reference.pointer,
      _id_describeContents as jni$_.JMethodIDPtr,
    ).integer;
  }

  static final _id_startComposition = _class.staticMethodId(
    r'startComposition',
    r'()Landroid/os/VibrationEffect$Composition;',
  );

  static final _startComposition =
      jni$_.ProtectedJniExtensions.lookup<
            jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )
            >
          >('globalEnv_CallStaticObjectMethod')
          .asFunction<
            jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
            )
          >();

  /// from: `static public android.os.VibrationEffect$Composition startComposition()`
  /// The returned object must be released after use, by calling the [release] method.
  static VibrationEffect$Composition? startComposition() {
    return _startComposition(
      _class.reference.pointer,
      _id_startComposition as jni$_.JMethodIDPtr,
    ).object<VibrationEffect$Composition?>(
      const $VibrationEffect$Composition$NullableType(),
    );
  }
}

final class $VibrationEffect$NullableType
    extends jni$_.JObjType<VibrationEffect?> {
  @jni$_.internal
  const $VibrationEffect$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/os/VibrationEffect;';

  @jni$_.internal
  @core$_.override
  VibrationEffect? fromReference(jni$_.JReference reference) =>
      reference.isNull ? null : VibrationEffect.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<VibrationEffect?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($VibrationEffect$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($VibrationEffect$NullableType) &&
        other is $VibrationEffect$NullableType;
  }
}

final class $VibrationEffect$Type extends jni$_.JObjType<VibrationEffect> {
  @jni$_.internal
  const $VibrationEffect$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/os/VibrationEffect;';

  @jni$_.internal
  @core$_.override
  VibrationEffect fromReference(jni$_.JReference reference) =>
      VibrationEffect.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<VibrationEffect?> get nullableType =>
      const $VibrationEffect$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($VibrationEffect$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($VibrationEffect$Type) &&
        other is $VibrationEffect$Type;
  }
}
