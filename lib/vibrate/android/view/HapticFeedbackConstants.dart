// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.view.HapticFeedbackConstants`
class HapticFeedbackConstants extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HapticFeedbackConstants> $type;

  @jni$_.internal
  HapticFeedbackConstants.fromReference(jni$_.JReference reference)
    : $type = type,
      super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
    r'android/view/HapticFeedbackConstants',
  );

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HapticFeedbackConstants$NullableType();
  static const type = $HapticFeedbackConstants$Type();

  /// from: `static public final int CLOCK_TICK`
  static const CLOCK_TICK = 4;

  /// from: `static public final int CONFIRM`
  static const CONFIRM = 16;

  /// from: `static public final int CONTEXT_CLICK`
  static const CONTEXT_CLICK = 6;

  /// from: `static public final int DRAG_START`
  static const DRAG_START = 25;

  /// from: `static public final int FLAG_IGNORE_GLOBAL_SETTING`
  static const FLAG_IGNORE_GLOBAL_SETTING = 2;

  /// from: `static public final int FLAG_IGNORE_VIEW_SETTING`
  static const FLAG_IGNORE_VIEW_SETTING = 1;

  /// from: `static public final int GESTURE_END`
  static const GESTURE_END = 13;

  /// from: `static public final int GESTURE_START`
  static const GESTURE_START = 12;

  /// from: `static public final int GESTURE_THRESHOLD_ACTIVATE`
  static const GESTURE_THRESHOLD_ACTIVATE = 23;

  /// from: `static public final int GESTURE_THRESHOLD_DEACTIVATE`
  static const GESTURE_THRESHOLD_DEACTIVATE = 24;

  /// from: `static public final int KEYBOARD_PRESS`
  static const KEYBOARD_PRESS = 3;

  /// from: `static public final int KEYBOARD_RELEASE`
  static const KEYBOARD_RELEASE = 7;

  /// from: `static public final int KEYBOARD_TAP`
  static const KEYBOARD_TAP = 3;

  /// from: `static public final int LONG_PRESS`
  static const LONG_PRESS = 0;

  /// from: `static public final int NO_HAPTICS`
  static const NO_HAPTICS = -1;

  /// from: `static public final int REJECT`
  static const REJECT = 17;

  /// from: `static public final int SEGMENT_FREQUENT_TICK`
  static const SEGMENT_FREQUENT_TICK = 27;

  /// from: `static public final int SEGMENT_TICK`
  static const SEGMENT_TICK = 26;

  /// from: `static public final int TEXT_HANDLE_MOVE`
  static const TEXT_HANDLE_MOVE = 9;

  /// from: `static public final int TOGGLE_OFF`
  static const TOGGLE_OFF = 22;

  /// from: `static public final int TOGGLE_ON`
  static const TOGGLE_ON = 21;

  /// from: `static public final int VIRTUAL_KEY`
  static const VIRTUAL_KEY = 1;

  /// from: `static public final int VIRTUAL_KEY_RELEASE`
  static const VIRTUAL_KEY_RELEASE = 8;
}

final class $HapticFeedbackConstants$NullableType
    extends jni$_.JObjType<HapticFeedbackConstants?> {
  @jni$_.internal
  const $HapticFeedbackConstants$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/HapticFeedbackConstants;';

  @jni$_.internal
  @core$_.override
  HapticFeedbackConstants? fromReference(jni$_.JReference reference) =>
      reference.isNull
      ? null
      : HapticFeedbackConstants.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HapticFeedbackConstants?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HapticFeedbackConstants$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HapticFeedbackConstants$NullableType) &&
        other is $HapticFeedbackConstants$NullableType;
  }
}

final class $HapticFeedbackConstants$Type
    extends jni$_.JObjType<HapticFeedbackConstants> {
  @jni$_.internal
  const $HapticFeedbackConstants$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/view/HapticFeedbackConstants;';

  @jni$_.internal
  @core$_.override
  HapticFeedbackConstants fromReference(jni$_.JReference reference) =>
      HapticFeedbackConstants.fromReference(reference);
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HapticFeedbackConstants?> get nullableType =>
      const $HapticFeedbackConstants$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HapticFeedbackConstants$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HapticFeedbackConstants$Type) &&
        other is $HapticFeedbackConstants$Type;
  }
}
